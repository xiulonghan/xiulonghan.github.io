[{"title":"基于flask实现简单的文件上传和下载","slug":"flask-upload","date":"2019-09-02T06:51:24.000Z","updated":"2019-09-02T10:01:24.182Z","comments":true,"path":"2019/09/02/flask-upload/","link":"","permalink":"https://xiulonghan.github.io/2019/09/02/flask-upload/","excerpt":"","text":"基于Flask实现简单的文件上传及下载。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# -*- coding:utf-8 -*-\"\"\"# Author:aluka_han# Email:aluka_han@163.com# Datetime:2019/8/30# Reference: https://dormousehole.readthedocs.io/en/latest/patterns/fileuploads.html# Description:\"\"\"# Standard libraryimport os# Third-party librariesfrom werkzeug.utils import secure_filenamefrom flask import Flask, render_template, request, redirect, url_for, flashfrom flask import send_from_directory, jsonifyupload_folder = './' # 上传文件需要保存的目录allowed_extensions = ['jpg', 'pdf', 'txt', 'gif'] # 允许上传的文件格式app = Flask(__name__, template_folder='../templates')app.secret_key = \"super secret key\"app.config['UPLOAD_FOLDER'] = upload_folderapp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024 # 上传文件的最大值def allowed_file(filename): \"\"\" 上传文件的格式要求 :param filename:文件名称 :return: \"\"\" return '.' in filename and \\ filename.rsplit('.')[1].lower() in allowed_extensions@app.route('/upload', methods=['POST', 'GET'])def upload(): if request.method == 'POST': if 'file' not in request.files: flash('Please Select File') return redirect(url_for('upload')) f = request.files['file'] if not allowed_file(f.filename): flash('Please Select Correct File') return redirect(url_for('upload')) if f and allowed_file(f.filename): save_path = os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(f.filename)) f.save(save_path) flash('Upload Success') return redirect(url_for('show_upload_file', filename=secure_filename(f.filename))) return render_template('upload.html')@app.route('/&lt;filename&gt;')def show_upload_file(filename): \"\"\" 显示上传的文件并下载 :param filename: 上传文件名称 :return: 下载文件 \"\"\" download_path = '../' return send_from_directory(download_path, filename) # as_attachment=True可以实现下载if __name__ == '__main__': app.run(host='127.0.0.1', port=9991, debug=True) 对应的html代码如下： 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Flask文件上传&lt;/h1&gt; &lt;form action=\"\" enctype='multipart/form-data' method='POST'&gt; &lt;input type=\"file\" name=\"file\"&gt; &lt;input type=\"submit\" value=\"上传\"&gt; &lt;/form&gt;&lt;div class=\"container\"&gt; &#123;% for message in get_flashed_messages() %&#125; &lt;div class=\"alert alert-warning\"&gt; &#123;&#123; message &#125;&#125; &lt;/div&gt; &#123;% endfor %&#125; &#123;% block page_content %&#125;&#123;% endblock %&#125;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 详细信息查看github 每日一句 Ordinary people merely think how they shall spend their time; a man of talent tries to use it.","categories":[{"name":"Falsk","slug":"Falsk","permalink":"https://xiulonghan.github.io/categories/Falsk/"}],"tags":[{"name":"flask","slug":"flask","permalink":"https://xiulonghan.github.io/tags/flask/"},{"name":"web","slug":"web","permalink":"https://xiulonghan.github.io/tags/web/"}],"keywords":[{"name":"Falsk","slug":"Falsk","permalink":"https://xiulonghan.github.io/categories/Falsk/"}]},{"title":"基于wandb实现keras模型的可视化","slug":"wandb-keras","date":"2019-08-16T09:33:29.000Z","updated":"2019-08-27T06:02:29.701Z","comments":true,"path":"2019/08/16/wandb-keras/","link":"","permalink":"https://xiulonghan.github.io/2019/08/16/wandb-keras/","excerpt":"​ 在训练神经网络的过程中，可视化模型的最终结构和中间训练过程是很重要的，这些都可以用写很长的可视化代码实现，但是为了偷懒，可以选择使用wandb，安装软件包，写几行代码，就可以在网页端显示各种指标及网络结构。","text":"​ 在训练神经网络的过程中，可视化模型的最终结构和中间训练过程是很重要的，这些都可以用写很长的可视化代码实现，但是为了偷懒，可以选择使用wandb，安装软件包，写几行代码，就可以在网页端显示各种指标及网络结构。 1、安装wandb 1pip install --upgrade wandb 目前wandb支持Keras，PyTorch，Tensorflow","categories":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://xiulonghan.github.io/categories/Deep-Learning/"}],"tags":[{"name":"keras","slug":"keras","permalink":"https://xiulonghan.github.io/tags/keras/"},{"name":"wandb","slug":"wandb","permalink":"https://xiulonghan.github.io/tags/wandb/"},{"name":"可视化","slug":"可视化","permalink":"https://xiulonghan.github.io/tags/可视化/"}],"keywords":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://xiulonghan.github.io/categories/Deep-Learning/"}]},{"title":"keras框架中融合层Merge各类函数的使用","slug":"keras-merge","date":"2019-08-09T07:34:37.000Z","updated":"2019-08-09T07:52:42.955Z","comments":true,"path":"2019/08/09/keras-merge/","link":"","permalink":"https://xiulonghan.github.io/2019/08/09/keras-merge/","excerpt":"在使用keras的过程中，会遇到融合层merge的使用，包括Add,Subtract,Multipy,Average,Maximum,Concatenate,Dot，以下就是对相关模块的简单示例，以备后续查看。代码如下：","text":"在使用keras的过程中，会遇到融合层merge的使用，包括Add,Subtract,Multipy,Average,Maximum,Concatenate,Dot，以下就是对相关模块的简单示例，以备后续查看。代码如下： 12345678910111213141516171819202122232425262728293031import numpy as npimport kerasfrom keras import backend as Kx1 = np.random.randint(5, size=(2, 2))x2 = np.random.randint(5, size=(2, 2))x1_t = K.variable(x1)x2_t = K.variable(x2)added = keras.layers.add([x1_t, x2_t])# 求多个张量的和，shape保持一致sub = keras.layers.subtract([x1_t, x2_t])# 求两个张量的差，shape保持一致mul = keras.layers.multiply([x1_t, x2_t])# 求多个张量的乘积，元素级别，shape保持一致ave = keras.layers.average([x1_t, x2_t])# 求多个张量的均值，元素级别，shape保持一致max = keras.layers.maximum([x1_t, x2_t])# 求多个张量的最大值，元素级别，shape保持一致concat = keras.layers.concatenate([x1_t, x2_t], axis=-2)# 连接多个张量，注意axis，如本例中，axis可以为[0,1,-1,-2]dot = keras.layers.dot([x1_t, x2_t], axes=1)# 求多个张量的dot，注意axisprint('the origin x1 is :\\n', x1)print('the origin x2 is :\\n', x2)print('the add is :\\n', K.eval(added))print('the subtract is :\\n', K.eval(sub))print('the multipy is :\\n', K.eval(mul))print('the average is :\\n', K.eval(ave))print('the maximum is :\\n', K.eval(max))print('the concat is :\\n', K.eval(concat))print('the dot is :\\n', K.eval(dot)) 输出结果 the origin x1 is : [[4 1] [1 1]]the origin x2 is : [[1 3] [2 2]] the add is : [[5. 4.] [3. 3.]]the subtract is : [[ 3. -2.] [-1. -1.]]the multipy is : [[4. 3.] [2. 2.]]the average is : [[2.5 2. ] [1.5 1.5]]the maximum is : [[4. 3.] [2. 2.]]the concat is : [[4. 1.] [1. 1.] [1. 3.] [2. 2.]]the dot is : [[7.] [4.]] 每日一句 If the people we love are stolen from us, the way to have them live on is to never stop loving them. Buildings burn, people die, but real love is forever.","categories":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://xiulonghan.github.io/categories/Deep-Learning/"}],"tags":[{"name":"keras","slug":"keras","permalink":"https://xiulonghan.github.io/tags/keras/"},{"name":"merge","slug":"merge","permalink":"https://xiulonghan.github.io/tags/merge/"},{"name":"深度学习","slug":"深度学习","permalink":"https://xiulonghan.github.io/tags/深度学习/"}],"keywords":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://xiulonghan.github.io/categories/Deep-Learning/"}]},{"title":"python解析号码归属地","slug":"phone-attribute","date":"2019-08-01T03:16:43.000Z","updated":"2019-08-01T08:14:49.369Z","comments":true,"path":"2019/08/01/phone-attribute/","link":"","permalink":"https://xiulonghan.github.io/2019/08/01/phone-attribute/","excerpt":"​ 在实际生产环境中，特别是进行运营商数据的处理时，会解析某个号码的归属地、运营商等。本文基于百度的开源接口实现号码归属地解析。代码如下：","text":"​ 在实际生产环境中，特别是进行运营商数据的处理时，会解析某个号码的归属地、运营商等。本文基于百度的开源接口实现号码归属地解析。代码如下： 123456789101112131415161718192021222324252627282930# 导入需求的包import demjsonimport urllib.request#定义号码解析函数def get_number_attribution(_number): \"\"\" Returns the attribution information of the input number。 :param _number: :return: _number,province,city,operator \"\"\" try: url = 'http://mobsec-dianhua.baidu.com/dianhua_api/open/location?tel='+str(_number) req = urllib.request.Request(url) resp = urllib.request.urlopen(req) content = resp.read() resp = demjson.decode(content) number_detail = resp['response'][_number]['detail'] city = number_detail['area'][0]['city'] province = number_detail['province'] operator = number_detail['operator'] print(\"号码：&#123;0&#125;，省份：&#123;1&#125;，城市：&#123;2&#125;，运营商：&#123;3&#125;\".format(_number, province, city, operator)) except ValueError: print(ValueError) #主函数入口if __name__ == '__main__': #测试号码 number = 'phone_number' get_number_attribution(_number=number) 示例： 1234567输入：18244226985输出：号码：18244226985，省份：四川，城市：成都，运营商：移动输入：17001111234输出：号码：17001111234，省份：北京，城市：北京，运营商：苏宁互联输入：19926782222输出：号码：19926782222，省份：广东，城市：揭阳，运营商：电信**注**：其中对于虚拟运营商号段，该接口输出的不是电信、移动、联通，而是具体的代理商。 每日一句The great pleasure in life is doing what people say you cannot do.","categories":[{"name":"Data Analysis","slug":"Data-Analysis","permalink":"https://xiulonghan.github.io/categories/Data-Analysis/"}],"tags":[{"name":"python","slug":"python","permalink":"https://xiulonghan.github.io/tags/python/"},{"name":"号码归属地","slug":"号码归属地","permalink":"https://xiulonghan.github.io/tags/号码归属地/"}],"keywords":[{"name":"Data Analysis","slug":"Data-Analysis","permalink":"https://xiulonghan.github.io/categories/Data-Analysis/"}]}]